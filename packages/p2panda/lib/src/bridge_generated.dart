// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class P2Panda {
  /// Create, sign and encode a p2panda entry.
  ///
  /// Takes large u64 integers for log id and seq num as strings. If we would declare them as u64
  /// here they will get converted to int which is not a real native u64 integer in Dart! We pass
  /// them over as strings and then safely convert them to u64 internally.
  Future<Uint8List> signAndEncodeEntry(
      {required String logId,
      required String seqNum,
      String? skiplinkHash,
      String? backlinkHash,
      required Uint8List payload,
      required KeyPair keyPair,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignAndEncodeEntryConstMeta;

  /// Decodes a p2panda entry.
  ///
  /// Returns large u64 integers for log id and seq num as strings. If we would declare them as u64
  /// here they will get converted to int which is not a real native u64 integer in Dart! We pass
  /// them over as strings and then safely convert them to `BigInt` in the Dart world.
  Future<(String, String, String, String?, String?)> decodeEntry(
      {required Uint8List entry, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeEntryConstMeta;

  /// Encode a p2panda operation parsed from JSON input.
  Future<Uint8List> encodeOperation(
      {required OperationAction action,
      required String schemaId,
      String? previous,
      List<(String, OperationValue)>? fields,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeOperationConstMeta;

  /// Decodes an p2panda operation, returning it's action and schema id.
  Future<(OperationAction, String)> decodeOperation(
      {required Uint8List operation, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeOperationConstMeta;

  /// Runs a p2panda node in a separate thread in the background.
  ///
  /// Supports Android logging for logs coming from the node.
  Future<void> startNode(
      {required KeyPair keyPair,
      required String databaseUrl,
      required String blobsBasePath,
      required List<String> relayAddresses,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartNodeConstMeta;

  /// Turns off running node.
  Future<void> shutdownNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShutdownNodeConstMeta;

  /// Generates a new key pair using the systems random number generator (CSPRNG) as a seed.
  Future<KeyPair> newStaticMethodKeyPair({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodKeyPairConstMeta;

  /// Derives a key pair from a private key.
  Future<KeyPair> fromPrivateKeyStaticMethodKeyPair(
      {required Uint8List bytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromPrivateKeyStaticMethodKeyPairConstMeta;

  /// Returns the private half of the key pair.
  Future<Uint8List> privateKeyMethodKeyPair(
      {required KeyPair that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrivateKeyMethodKeyPairConstMeta;

  /// Returns the public half of the key pair.
  Future<Uint8List> publicKeyMethodKeyPair(
      {required KeyPair that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicKeyMethodKeyPairConstMeta;

  DropFnType get dropOpaquePandaKeyPair;
  ShareFnType get shareOpaquePandaKeyPair;
  OpaqueTypeFinalizer get PandaKeyPairFinalizer;
}

@sealed
class PandaKeyPair extends FrbOpaque {
  final P2Panda bridge;
  PandaKeyPair.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaquePandaKeyPair;

  @override
  ShareFnType get shareFn => bridge.shareOpaquePandaKeyPair;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.PandaKeyPairFinalizer;
}

/// Ed25519 key pair for authors to sign p2panda entries with.
class KeyPair {
  final P2Panda bridge;
  final PandaKeyPair field0;

  const KeyPair({
    required this.bridge,
    required this.field0,
  });

  /// Generates a new key pair using the systems random number generator (CSPRNG) as a seed.
  static Future<KeyPair> newKeyPair({required P2Panda bridge, dynamic hint}) =>
      bridge.newStaticMethodKeyPair(hint: hint);

  /// Derives a key pair from a private key.
  static Future<KeyPair> fromPrivateKey(
          {required P2Panda bridge, required Uint8List bytes, dynamic hint}) =>
      bridge.fromPrivateKeyStaticMethodKeyPair(bytes: bytes, hint: hint);

  /// Returns the private half of the key pair.
  Future<Uint8List> privateKey({dynamic hint}) =>
      bridge.privateKeyMethodKeyPair(
        that: this,
      );

  /// Returns the public half of the key pair.
  Future<Uint8List> publicKey({dynamic hint}) => bridge.publicKeyMethodKeyPair(
        that: this,
      );
}

/// Operations are categorised by their action type.
///
/// An action defines the operation format and if this operation creates, updates or deletes a data
/// document.
enum OperationAction {
  /// Operation creates a new document.
  Create,

  /// Operation updates an existing document.
  Update,

  /// Operation deletes an existing document.
  Delete,
}

@freezed
sealed class OperationValue with _$OperationValue {
  /// Boolean value.
  const factory OperationValue.boolean(
    bool field0,
  ) = OperationValue_Boolean;

  /// Floating point value.
  const factory OperationValue.float(
    double field0,
  ) = OperationValue_Float;

  /// Signed integer value.
  const factory OperationValue.integer(
    int field0,
  ) = OperationValue_Integer;

  /// String value.
  const factory OperationValue.string(
    String field0,
  ) = OperationValue_String;

  /// Bytes value.
  const factory OperationValue.bytes(
    Uint8List field0,
  ) = OperationValue_Bytes;

  /// Reference to a document.
  const factory OperationValue.relation(
    String field0,
  ) = OperationValue_Relation;

  /// Reference to a list of documents.
  const factory OperationValue.relationList(
    List<String> field0,
  ) = OperationValue_RelationList;

  /// Reference to a document view.
  ///
  /// Multiple operation ids are separated by an understore ('_').
  const factory OperationValue.pinnedRelation(
    String field0,
  ) = OperationValue_PinnedRelation;

  /// Reference to a list of document views.
  ///
  /// Multiple operation ids are separated by an understore ('_').
  const factory OperationValue.pinnedRelationList(
    List<String> field0,
  ) = OperationValue_PinnedRelationList;
}

class P2PandaImpl implements P2Panda {
  final P2PandaPlatform _platform;
  factory P2PandaImpl(ExternalLibrary dylib) =>
      P2PandaImpl.raw(P2PandaPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory P2PandaImpl.wasm(FutureOr<WasmModule> module) =>
      P2PandaImpl(module as ExternalLibrary);
  P2PandaImpl.raw(this._platform);
  Future<Uint8List> signAndEncodeEntry(
      {required String logId,
      required String seqNum,
      String? skiplinkHash,
      String? backlinkHash,
      required Uint8List payload,
      required KeyPair keyPair,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(logId);
    var arg1 = _platform.api2wire_String(seqNum);
    var arg2 = _platform.api2wire_opt_String(skiplinkHash);
    var arg3 = _platform.api2wire_opt_String(backlinkHash);
    var arg4 = _platform.api2wire_uint_8_list(payload);
    var arg5 = _platform.api2wire_box_autoadd_key_pair(keyPair);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign_and_encode_entry(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSignAndEncodeEntryConstMeta,
      argValues: [logId, seqNum, skiplinkHash, backlinkHash, payload, keyPair],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignAndEncodeEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_and_encode_entry",
        argNames: [
          "logId",
          "seqNum",
          "skiplinkHash",
          "backlinkHash",
          "payload",
          "keyPair"
        ],
      );

  Future<(String, String, String, String?, String?)> decodeEntry(
      {required Uint8List entry, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(entry);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decode_entry(port_, arg0),
      parseSuccessData:
          _wire2api___record__String_String_String_opt_String_opt_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDecodeEntryConstMeta,
      argValues: [entry],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeEntryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_entry",
        argNames: ["entry"],
      );

  Future<Uint8List> encodeOperation(
      {required OperationAction action,
      required String schemaId,
      String? previous,
      List<(String, OperationValue)>? fields,
      dynamic hint}) {
    var arg0 = api2wire_operation_action(action);
    var arg1 = _platform.api2wire_String(schemaId);
    var arg2 = _platform.api2wire_opt_String(previous);
    var arg3 =
        _platform.api2wire_opt_list___record__String_operation_value(fields);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_encode_operation(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kEncodeOperationConstMeta,
      argValues: [action, schemaId, previous, fields],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeOperationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_operation",
        argNames: ["action", "schemaId", "previous", "fields"],
      );

  Future<(OperationAction, String)> decodeOperation(
      {required Uint8List operation, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(operation);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decode_operation(port_, arg0),
      parseSuccessData: _wire2api___record__operation_action_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDecodeOperationConstMeta,
      argValues: [operation],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeOperationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_operation",
        argNames: ["operation"],
      );

  Future<void> startNode(
      {required KeyPair keyPair,
      required String databaseUrl,
      required String blobsBasePath,
      required List<String> relayAddresses,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_key_pair(keyPair);
    var arg1 = _platform.api2wire_String(databaseUrl);
    var arg2 = _platform.api2wire_String(blobsBasePath);
    var arg3 = _platform.api2wire_StringList(relayAddresses);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start_node(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartNodeConstMeta,
      argValues: [keyPair, databaseUrl, blobsBasePath, relayAddresses],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_node",
        argNames: ["keyPair", "databaseUrl", "blobsBasePath", "relayAddresses"],
      );

  Future<void> shutdownNode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_shutdown_node(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kShutdownNodeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShutdownNodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "shutdown_node",
        argNames: [],
      );

  Future<KeyPair> newStaticMethodKeyPair({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__KeyPair(port_),
      parseSuccessData: (d) => _wire2api_key_pair(d),
      parseErrorData: null,
      constMeta: kNewStaticMethodKeyPairConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__KeyPair",
        argNames: [],
      );

  Future<KeyPair> fromPrivateKeyStaticMethodKeyPair(
      {required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_from_private_key__static_method__KeyPair(port_, arg0),
      parseSuccessData: (d) => _wire2api_key_pair(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFromPrivateKeyStaticMethodKeyPairConstMeta,
      argValues: [bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFromPrivateKeyStaticMethodKeyPairConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "from_private_key__static_method__KeyPair",
            argNames: ["bytes"],
          );

  Future<Uint8List> privateKeyMethodKeyPair(
      {required KeyPair that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_key_pair(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_private_key__method__KeyPair(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kPrivateKeyMethodKeyPairConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrivateKeyMethodKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "private_key__method__KeyPair",
        argNames: ["that"],
      );

  Future<Uint8List> publicKeyMethodKeyPair(
      {required KeyPair that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_key_pair(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_public_key__method__KeyPair(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kPublicKeyMethodKeyPairConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicKeyMethodKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "public_key__method__KeyPair",
        argNames: ["that"],
      );

  DropFnType get dropOpaquePandaKeyPair =>
      _platform.inner.drop_opaque_PandaKeyPair;
  ShareFnType get shareOpaquePandaKeyPair =>
      _platform.inner.share_opaque_PandaKeyPair;
  OpaqueTypeFinalizer get PandaKeyPairFinalizer =>
      _platform.PandaKeyPairFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  PandaKeyPair _wire2api_PandaKeyPair(dynamic raw) {
    return PandaKeyPair.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  (String, String, String, String?, String?)
      _wire2api___record__String_String_String_opt_String_opt_String(
          dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) {
      throw Exception('Expected 5 elements, got ${arr.length}');
    }
    return (
      _wire2api_String(arr[0]),
      _wire2api_String(arr[1]),
      _wire2api_String(arr[2]),
      _wire2api_opt_String(arr[3]),
      _wire2api_opt_String(arr[4]),
    );
  }

  (OperationAction, String) _wire2api___record__operation_action_String(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_operation_action(arr[0]),
      _wire2api_String(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  KeyPair _wire2api_key_pair(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KeyPair(
      bridge: this,
      field0: _wire2api_PandaKeyPair(arr[0]),
    );
  }

  OperationAction _wire2api_operation_action(dynamic raw) {
    return OperationAction.values[raw as int];
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_operation_action(OperationAction raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class P2PandaPlatform extends FlutterRustBridgeBase<P2PandaWire> {
  P2PandaPlatform(ffi.DynamicLibrary dylib) : super(P2PandaWire(dylib));

// Section: api2wire

  @protected
  wire_PandaKeyPair api2wire_PandaKeyPair(PandaKeyPair raw) {
    final ptr = inner.new_PandaKeyPair();
    _api_fill_to_wire_PandaKeyPair(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_KeyPair> api2wire_box_autoadd_key_pair(KeyPair raw) {
    final ptr = inner.new_box_autoadd_key_pair_0();
    _api_fill_to_wire_key_pair(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_list___record__String_operation_value>
      api2wire_list___record__String_operation_value(
          List<(String, OperationValue)> raw) {
    final ans = inner.new_list___record__String_operation_value_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire___record__String_operation_value(
          raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_list___record__String_operation_value>
      api2wire_opt_list___record__String_operation_value(
          List<(String, OperationValue)>? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_list___record__String_operation_value(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _PandaKeyPairFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_PandaKeyPairPtr);
  OpaqueTypeFinalizer get PandaKeyPairFinalizer => _PandaKeyPairFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_PandaKeyPair(
      PandaKeyPair apiObj, wire_PandaKeyPair wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire___record__String_operation_value(
      (String, OperationValue) apiObj,
      wire___record__String_operation_value wireObj) {
    wireObj.field0 = api2wire_String(apiObj.$1);
    _api_fill_to_wire_operation_value(apiObj.$2, wireObj.field1);
  }

  void _api_fill_to_wire_box_autoadd_key_pair(
      KeyPair apiObj, ffi.Pointer<wire_KeyPair> wireObj) {
    _api_fill_to_wire_key_pair(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_key_pair(KeyPair apiObj, wire_KeyPair wireObj) {
    wireObj.field0 = api2wire_PandaKeyPair(apiObj.field0);
  }

  void _api_fill_to_wire_operation_value(
      OperationValue apiObj, wire_OperationValue wireObj) {
    if (apiObj is OperationValue_Boolean) {
      var pre_field0 = api2wire_bool(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_OperationValue_Boolean();
      wireObj.kind.ref.Boolean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_Float) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_OperationValue_Float();
      wireObj.kind.ref.Float.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_Integer) {
      var pre_field0 = api2wire_i64(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_OperationValue_Integer();
      wireObj.kind.ref.Integer.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_String) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_OperationValue_String();
      wireObj.kind.ref.String.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_Bytes) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_OperationValue_Bytes();
      wireObj.kind.ref.Bytes.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_Relation) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_OperationValue_Relation();
      wireObj.kind.ref.Relation.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_RelationList) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_OperationValue_RelationList();
      wireObj.kind.ref.RelationList.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_PinnedRelation) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_OperationValue_PinnedRelation();
      wireObj.kind.ref.PinnedRelation.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OperationValue_PinnedRelationList) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_OperationValue_PinnedRelationList();
      wireObj.kind.ref.PinnedRelationList.ref.field0 = pre_field0;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class P2PandaWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  P2PandaWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  P2PandaWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_sign_and_encode_entry(
    int port_,
    ffi.Pointer<wire_uint_8_list> log_id,
    ffi.Pointer<wire_uint_8_list> seq_num,
    ffi.Pointer<wire_uint_8_list> skiplink_hash,
    ffi.Pointer<wire_uint_8_list> backlink_hash,
    ffi.Pointer<wire_uint_8_list> payload,
    ffi.Pointer<wire_KeyPair> key_pair,
  ) {
    return _wire_sign_and_encode_entry(
      port_,
      log_id,
      seq_num,
      skiplink_hash,
      backlink_hash,
      payload,
      key_pair,
    );
  }

  late final _wire_sign_and_encode_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_KeyPair>)>>('wire_sign_and_encode_entry');
  late final _wire_sign_and_encode_entry =
      _wire_sign_and_encode_entryPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_KeyPair>)>();

  void wire_decode_entry(
    int port_,
    ffi.Pointer<wire_uint_8_list> entry,
  ) {
    return _wire_decode_entry(
      port_,
      entry,
    );
  }

  late final _wire_decode_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_decode_entry');
  late final _wire_decode_entry = _wire_decode_entryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_encode_operation(
    int port_,
    int action,
    ffi.Pointer<wire_uint_8_list> schema_id,
    ffi.Pointer<wire_uint_8_list> previous,
    ffi.Pointer<wire_list___record__String_operation_value> fields,
  ) {
    return _wire_encode_operation(
      port_,
      action,
      schema_id,
      previous,
      fields,
    );
  }

  late final _wire_encode_operationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list___record__String_operation_value>)>>(
      'wire_encode_operation');
  late final _wire_encode_operation = _wire_encode_operationPtr.asFunction<
      void Function(
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list___record__String_operation_value>)>();

  void wire_decode_operation(
    int port_,
    ffi.Pointer<wire_uint_8_list> operation,
  ) {
    return _wire_decode_operation(
      port_,
      operation,
    );
  }

  late final _wire_decode_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_decode_operation');
  late final _wire_decode_operation = _wire_decode_operationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_node(
    int port_,
    ffi.Pointer<wire_KeyPair> key_pair,
    ffi.Pointer<wire_uint_8_list> database_url,
    ffi.Pointer<wire_uint_8_list> blobs_base_path,
    ffi.Pointer<wire_StringList> relay_addresses,
  ) {
    return _wire_start_node(
      port_,
      key_pair,
      database_url,
      blobs_base_path,
      relay_addresses,
    );
  }

  late final _wire_start_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_KeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_start_node');
  late final _wire_start_node = _wire_start_nodePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_KeyPair>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_StringList>)>();

  void wire_shutdown_node(
    int port_,
  ) {
    return _wire_shutdown_node(
      port_,
    );
  }

  late final _wire_shutdown_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_shutdown_node');
  late final _wire_shutdown_node =
      _wire_shutdown_nodePtr.asFunction<void Function(int)>();

  void wire_new__static_method__KeyPair(
    int port_,
  ) {
    return _wire_new__static_method__KeyPair(
      port_,
    );
  }

  late final _wire_new__static_method__KeyPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_new__static_method__KeyPair');
  late final _wire_new__static_method__KeyPair =
      _wire_new__static_method__KeyPairPtr.asFunction<void Function(int)>();

  void wire_from_private_key__static_method__KeyPair(
    int port_,
    ffi.Pointer<wire_uint_8_list> bytes,
  ) {
    return _wire_from_private_key__static_method__KeyPair(
      port_,
      bytes,
    );
  }

  late final _wire_from_private_key__static_method__KeyPairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_from_private_key__static_method__KeyPair');
  late final _wire_from_private_key__static_method__KeyPair =
      _wire_from_private_key__static_method__KeyPairPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_private_key__method__KeyPair(
    int port_,
    ffi.Pointer<wire_KeyPair> that,
  ) {
    return _wire_private_key__method__KeyPair(
      port_,
      that,
    );
  }

  late final _wire_private_key__method__KeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_KeyPair>)>>('wire_private_key__method__KeyPair');
  late final _wire_private_key__method__KeyPair =
      _wire_private_key__method__KeyPairPtr
          .asFunction<void Function(int, ffi.Pointer<wire_KeyPair>)>();

  void wire_public_key__method__KeyPair(
    int port_,
    ffi.Pointer<wire_KeyPair> that,
  ) {
    return _wire_public_key__method__KeyPair(
      port_,
      that,
    );
  }

  late final _wire_public_key__method__KeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_KeyPair>)>>('wire_public_key__method__KeyPair');
  late final _wire_public_key__method__KeyPair =
      _wire_public_key__method__KeyPairPtr
          .asFunction<void Function(int, ffi.Pointer<wire_KeyPair>)>();

  wire_PandaKeyPair new_PandaKeyPair() {
    return _new_PandaKeyPair();
  }

  late final _new_PandaKeyPairPtr =
      _lookup<ffi.NativeFunction<wire_PandaKeyPair Function()>>(
          'new_PandaKeyPair');
  late final _new_PandaKeyPair =
      _new_PandaKeyPairPtr.asFunction<wire_PandaKeyPair Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_KeyPair> new_box_autoadd_key_pair_0() {
    return _new_box_autoadd_key_pair_0();
  }

  late final _new_box_autoadd_key_pair_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_KeyPair> Function()>>(
          'new_box_autoadd_key_pair_0');
  late final _new_box_autoadd_key_pair_0 = _new_box_autoadd_key_pair_0Ptr
      .asFunction<ffi.Pointer<wire_KeyPair> Function()>();

  ffi.Pointer<wire_list___record__String_operation_value>
      new_list___record__String_operation_value_0(
    int len,
  ) {
    return _new_list___record__String_operation_value_0(
      len,
    );
  }

  late final _new_list___record__String_operation_value_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list___record__String_operation_value> Function(
              ffi.Int32)>>('new_list___record__String_operation_value_0');
  late final _new_list___record__String_operation_value_0 =
      _new_list___record__String_operation_value_0Ptr.asFunction<
          ffi.Pointer<wire_list___record__String_operation_value> Function(
              int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_PandaKeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_PandaKeyPair(
      ptr,
    );
  }

  late final _drop_opaque_PandaKeyPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_PandaKeyPair');
  late final _drop_opaque_PandaKeyPair = _drop_opaque_PandaKeyPairPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_PandaKeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_PandaKeyPair(
      ptr,
    );
  }

  late final _share_opaque_PandaKeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_PandaKeyPair');
  late final _share_opaque_PandaKeyPair = _share_opaque_PandaKeyPairPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_Boolean() {
    return _inflate_OperationValue_Boolean();
  }

  late final _inflate_OperationValue_BooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_Boolean');
  late final _inflate_OperationValue_Boolean =
      _inflate_OperationValue_BooleanPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_Float() {
    return _inflate_OperationValue_Float();
  }

  late final _inflate_OperationValue_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_Float');
  late final _inflate_OperationValue_Float = _inflate_OperationValue_FloatPtr
      .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_Integer() {
    return _inflate_OperationValue_Integer();
  }

  late final _inflate_OperationValue_IntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_Integer');
  late final _inflate_OperationValue_Integer =
      _inflate_OperationValue_IntegerPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_String() {
    return _inflate_OperationValue_String();
  }

  late final _inflate_OperationValue_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_String');
  late final _inflate_OperationValue_String = _inflate_OperationValue_StringPtr
      .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_Bytes() {
    return _inflate_OperationValue_Bytes();
  }

  late final _inflate_OperationValue_BytesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_Bytes');
  late final _inflate_OperationValue_Bytes = _inflate_OperationValue_BytesPtr
      .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_Relation() {
    return _inflate_OperationValue_Relation();
  }

  late final _inflate_OperationValue_RelationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_Relation');
  late final _inflate_OperationValue_Relation =
      _inflate_OperationValue_RelationPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_RelationList() {
    return _inflate_OperationValue_RelationList();
  }

  late final _inflate_OperationValue_RelationListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_RelationList');
  late final _inflate_OperationValue_RelationList =
      _inflate_OperationValue_RelationListPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_PinnedRelation() {
    return _inflate_OperationValue_PinnedRelation();
  }

  late final _inflate_OperationValue_PinnedRelationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_PinnedRelation');
  late final _inflate_OperationValue_PinnedRelation =
      _inflate_OperationValue_PinnedRelationPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  ffi.Pointer<OperationValueKind> inflate_OperationValue_PinnedRelationList() {
    return _inflate_OperationValue_PinnedRelationList();
  }

  late final _inflate_OperationValue_PinnedRelationListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OperationValueKind> Function()>>(
          'inflate_OperationValue_PinnedRelationList');
  late final _inflate_OperationValue_PinnedRelationList =
      _inflate_OperationValue_PinnedRelationListPtr
          .asFunction<ffi.Pointer<OperationValueKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_PandaKeyPair extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_KeyPair extends ffi.Struct {
  external wire_PandaKeyPair field0;
}

final class wire_OperationValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

final class wire_OperationValue_Float extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class wire_OperationValue_Integer extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_OperationValue_String extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_OperationValue_Bytes extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_OperationValue_Relation extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OperationValue_RelationList extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

final class wire_OperationValue_PinnedRelation extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_OperationValue_PinnedRelationList extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

final class OperationValueKind extends ffi.Union {
  external ffi.Pointer<wire_OperationValue_Boolean> Boolean;

  external ffi.Pointer<wire_OperationValue_Float> Float;

  external ffi.Pointer<wire_OperationValue_Integer> Integer;

  external ffi.Pointer<wire_OperationValue_String> String;

  external ffi.Pointer<wire_OperationValue_Bytes> Bytes;

  external ffi.Pointer<wire_OperationValue_Relation> Relation;

  external ffi.Pointer<wire_OperationValue_RelationList> RelationList;

  external ffi.Pointer<wire_OperationValue_PinnedRelation> PinnedRelation;

  external ffi.Pointer<wire_OperationValue_PinnedRelationList>
      PinnedRelationList;
}

final class wire_OperationValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<OperationValueKind> kind;
}

final class wire___record__String_operation_value extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;

  external wire_OperationValue field1;
}

final class wire_list___record__String_operation_value extends ffi.Struct {
  external ffi.Pointer<wire___record__String_operation_value> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
